package com.chihuobao.kuaidian.ui.fragment;

import java.text.DecimalFormat;
import java.util.List;

import org.xutils.DbManager;
import org.xutils.db.sqlite.WhereBuilder;
import org.xutils.ex.DbException;

import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.alibaba.fastjson.JSONArray;
import com.chihuobao.kuaidian.R;
import com.chihuobao.kuaidian.base.CHBApp;
import com.chihuobao.kuaidian.base.bean.Canyin_Shop_Diningtable;
import com.chihuobao.kuaidian.base.bean.Canyin_Shop_Product;
import com.chihuobao.kuaidian.base.bean.DCaiBean;
import com.chihuobao.kuaidian.base.bean.HaveProductBean;
import com.chihuobao.kuaidian.base.bean.MsgBean;
import com.chihuobao.kuaidian.base.bean.MsgProBean;
import com.chihuobao.kuaidian.base.log.FrameLog;
import com.chihuobao.kuaidian.base.utils.PrefsConfig;
import com.chihuobao.kuaidian.base.utils.SysWorkTools;
import com.chihuobao.kuaidian.constans.Constans;
import com.chihuobao.kuaidian.mod.asynctask.http.FetchListener;
import com.chihuobao.kuaidian.mod.manager.DataFetchManager;
import com.chihuobao.kuaidian.ui.activity.MainActivity;
import com.chihuobao.kuaidian.ui.adapter.MsgProductAdapter;
import com.chihuobao.kuaidian.ui.adapter.PinyinAdapter;
import com.chihuobao.kuaidian.ui.fragment.HeaderFragment.OnRightMenuClickListener;
import com.chihuobao.kuaidian.ui.receiver.HomeBroadcastReceiver;
import com.chihuobao.kuaidian.ui.receiver.IDataTransfer;
import com.chihuobao.kuaidian.ui.uisupport.MsgProductList;
import com.chihuobao.kuaidian.ui.uisupport.ProgressView;
import com.umeng.analytics.MobclickAgent;
import com.zhiren.swipelistview.SwipeMenu;
import com.zhiren.swipelistview.SwipeMenuCreator;
import com.zhiren.swipelistview.SwipeMenuItem;
import com.zhiren.swipelistview.SwipeMenuListView;
import com.zhiren.swipelistview.SwipeMenuListView.OnMenuItemClickListener;

/**
 * 消息点菜
 */
public class MsgTakeOrderFragment extends HeaderFragment implements
		OnRightMenuClickListener, OnItemSelectedListener, IDataTransfer {

	private static final String TAG = "TakeOrderFragment";
	private boolean bCanOpen = true;
	private EditText mSearchEt;
	private ImageView mSearchIv;
	private SwipeMenuListView mDishLv; // 已点菜列表
	private ListView mPinyinLv; // 拼音列表
	private TextView mWholeRemarksTv;
	private TextView mSureTakeOrderTv;
	private RelativeLayout mMiddleRl;
	private TextView mProductPhaseTotalTv; // 品项合计
	private TextView mPriceTotalTv; // 价格合计
	private TextView mNumTotalTv; // 数量合计
	private TextView mMarksTv;
	private TextView mCancelSearchTv;
	private ImageView mShowMarksIv;
	private DbManager dbManager;
	private PinyinAdapter pinyinAdapter; // 拼音适配器
	private List<Canyin_Shop_Product> pinyinList;// 拼音菜品数据
	private MsgProductAdapter productAdapter; // 添加菜品后的adapter
	private MsgProductList<MsgProBean> productList;// 已有菜品列表
	private String tasteStr = ""; // 整单备注数据
	private RelativeLayout mSearchRl;
	private Canyin_Shop_Product selectProduct;
	private double noPayPrice = 0.0;
	private LinearLayout mTongjiLinlout; // 价格合计显示
	private RelativeLayout mRemarkRelalout; // 整单备注UI
	private MsgBean mOpCurMsg;
	private String mSource = "0";

	private boolean bIsLoading = false;
	private RelativeLayout mRootView;
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		Bundle bundle = getArguments();
		if (bundle != null) {
			mOpCurMsg = (MsgBean) bundle.getSerializable(Constans.KEY_MSG_ITEM);
			FrameLog.e("MsgTakeOrderFragment", mOpCurMsg.toString());
		}
		dbManager = CHBApp.getInstance().getDbManager();
		productList = new MsgProductList<MsgProBean>();
		
		tasteStr = mOpCurMsg.getTasteRemark();
		String sRemark = PrefsConfig.getRemarksByLsh(mOpCurMsg.getLslsh());
		if(!TextUtils.isEmpty(sRemark)) {
			String[] tastRemarkStrings = tasteStr.split(",");
			String[] remarkStrings = sRemark.split(",");
			
			StringBuilder sb = new StringBuilder(); 
			for (String tast : tastRemarkStrings) {
				for (String remark : remarkStrings) {
					if(!tast.equals(remark)) {
						sb.append(remark).append(",");
					}
				}
			}
			
			if(sb.length() > 0) {
				tasteStr += ("," + sb.substring(0, sb.length()-1));
			}
			
		}
		HomeBroadcastReceiver.registerIDataTransfer(this);
	}

	@Override
	public void onPause() {
		super.onPause();
		MobclickAgent.onPageEnd(TAG);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		ViewGroup contentView = (ViewGroup) inflater.inflate(
				R.layout.fragment_order_dish, null);
		mRootView = (RelativeLayout) contentView.findViewById(R.id.rootLayout);
		mSearchEt = (EditText) contentView.findViewById(R.id.et_search);
		mSearchEt.addTextChangedListener(watcher);
		mSearchIv = (ImageView) contentView.findViewById(R.id.iv_search_tag);
		mDishLv = (SwipeMenuListView) contentView
				.findViewById(R.id.dish_listview); // 菜品列表 mDishLv
		productAdapter = new MsgProductAdapter(getActivity());
		mDishLv.setAdapter(productAdapter);
		mDishLv.setMenuCreator(creator);
		mDishLv.setOnMenuItemClickListener(mOnMenuItemClickListener);
		mWholeRemarksTv = (TextView) contentView
				.findViewById(R.id.tv_whole_remarks);
		mSureTakeOrderTv = (TextView) contentView
				.findViewById(R.id.tv_sure_remarks);
		mMiddleRl = (RelativeLayout) contentView
				.findViewById(R.id.relativeLayout_middle);
		mTongjiLinlout = (LinearLayout) contentView
				.findViewById(R.id.tongji_layout);
		mRemarkRelalout = (RelativeLayout) contentView
				.findViewById(R.id.rl_remark);
		mProductPhaseTotalTv = (TextView) contentView
				.findViewById(R.id.tv_pinxiang_num);
		mPriceTotalTv = (TextView) contentView
				.findViewById(R.id.tv_total_price);
		mCancelSearchTv = (TextView) contentView
				.findViewById(R.id.tv_search_cancle);
		mCancelSearchTv.setOnClickListener(cancelSearchListener);
		mSearchRl = (RelativeLayout) contentView
				.findViewById(R.id.ralative_search);
		mPinyinLv = (ListView) contentView.findViewById(R.id.search_listview);
		pinyinAdapter = new PinyinAdapter(getActivity());
		mPinyinLv.setAdapter(pinyinAdapter);
		mPinyinLv.setOnItemClickListener(pinyinItemClickListener);
		mNumTotalTv = (TextView) contentView.findViewById(R.id.tv_pro_num);
		mMarksTv = (TextView) contentView.findViewById(R.id.tv_remarks);

		mShowMarksIv = (ImageView) contentView.findViewById(R.id.iv_remark_tag);
		mDishLv.setOnItemSelectedListener(this);
		mSearchIv.setOnClickListener(mSearchBtnListener);
		mShowMarksIv.setOnClickListener(mShowMarkListener);
		mWholeRemarksTv.setOnClickListener(mWholeRemarkListener);
		mSureTakeOrderTv.setOnClickListener(mSureTakeOrderLstener);
		setOnRightMenuClickListener(this);

		return super.onCreateView(inflater, contentView, savedInstanceState);
	}

	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);
		if (SysWorkTools.isNetAvailable()) {
			DataFetchManager.getInstance().fetchLsProductAll(mOpCurMsg.getLslsh(),
					new FetchListener() {

						@Override
						public void onPreFetch() {
							bIsLoading = true;
							showLoading(true);
						}

						@Override
						public void onPostFetch(int status, Object... result) {
							bIsLoading = false;
							showLoading(false);
							if (status == FetchListener.STATUS_OK) {
								List<MsgProBean> hList = (List<MsgProBean>) result[0];
								mSource = (String) result[1];
								if (hList != null && !hList.isEmpty()) {
									productList.addAll(hList);
									productAdapter.setItems(productList);
									productAdapter.notifyDataSetChanged();
									doNoPayTotal();
									statisticsDishNum();

								} else {
									SysWorkTools.showToast(getActivity(), "没有数据！");
								}
							} else {
								String msg = (String) result[0];
								SysWorkTools.showToast(getActivity(), msg);
							}

						}
					});
		}else {
			SysWorkTools.showToast(getActivity(), "请检查网络");
		}
		
		if (!TextUtils.isEmpty(tasteStr)) { // 有整单备注数据
			mMiddleRl.setVisibility(View.VISIBLE);
			mRemarkRelalout.setVisibility(View.VISIBLE);
			mMarksTv.setText(tasteStr);
		} else {
			mMiddleRl.setVisibility(View.GONE);
			mRemarkRelalout.setVisibility(View.GONE);
			mMarksTv.setText("");
		}
	}

	@Override
	public void onResume() {
		super.onResume();

		MobclickAgent.onPageStart(TAG);
	}

	@Override
	protected String getTitle() {
		return getString(R.string.take_dish);
	}

	@Override
	protected int getMenuResId() {
		return R.drawable.bg_menu_order_dish;
	}

	@Override
	public boolean onKeyDown(int keyCode) {
		switch (keyCode) {
		case KeyEvent.KEYCODE_BACK:
			if(bIsLoading) {
//				bIsLoading = false;
//				CHBHttpTask task = DataFetchManager.getInstance().mCurHttpTask;
//				((MainActivity) getActivity()).showLoading(false);
//				if(task != null) {
//					task.cancel();
//				}
				return true;
			} else {
				close();
				return true;
			}
		default:
			return false;
		}
	}

	@Override
	public void OnRightMenuClick() {
		// 进入分类点菜
		MsgAddProductFragment fragment = new MsgAddProductFragment();
		((MainActivity) getActivity()).entrySubFragment(fragment);
	}

	/**
	 * 搜索按钮事件
	 */
	private OnClickListener mSearchBtnListener = new OnClickListener() {

		@Override
		public void onClick(View arg0) {
			mSearchEt.setText("");
		}
	};

	/**
	 * 显示完整文字
	 */
	private OnClickListener mShowMarkListener = new OnClickListener() {

		@Override
		public void onClick(View arg0) {
			if (bCanOpen) {
				mMarksTv.setMaxLines(10);
				mMarksTv.requestLayout();
				mShowMarksIv.setImageResource(R.drawable.up_marks);
				bCanOpen = false;
			} else {
				mMarksTv.setMaxLines(1);
				mMarksTv.requestLayout();
				mShowMarksIv.setImageResource(R.drawable.down_marks);
				bCanOpen = true;
			}
		}
	};

	/**
	 * 整单备注
	 */
	private OnClickListener mWholeRemarkListener = new OnClickListener() {

		@Override
		public void onClick(View arg0) {
			WholeDishRemarkFragment fragment = new WholeDishRemarkFragment();
			Bundle bundle = new Bundle();
			bundle.putString(Constans.KEY_REMARK, tasteStr);
			fragment.setArguments(bundle);
			((MainActivity) getActivity()).entrySubFragment(fragment);
		}
	};
	protected String tingbh;
	protected String taibh;

	/**
	 * 确认下单
	 */
	private OnClickListener mSureTakeOrderLstener = new OnClickListener() {

		@Override
		public void onClick(View arg0) {
			if (mSource.endsWith("5")) {//扫码点餐
				JSONArray jsonArray = new JSONArray();
//				for (MsgProBean hpBean : productList) {
//					hpBean.setTingBh(mOpCurMsg.getTingBH());
//					hpBean.setTaiBh(mOpCurMsg.getTaiBH());
//					hpBean.setLsh(mOpCurMsg.getLslsh());
//					hpBean.setDcyname(PrefsConfig.workerName);
//					hpBean.setDcycode(PrefsConfig.workerNum);
//					jsonArray.add(new DCaiBean(hpBean));
//				}
				for (MsgProBean hpBean : productList) {
					hpBean.setTingBh(tingbh);
					hpBean.setTaiBh(taibh);
					hpBean.setLsh(mOpCurMsg.getLslsh());
					hpBean.setDcyname(PrefsConfig.workerName);
					hpBean.setDcycode(PrefsConfig.workerNum);
					jsonArray.add(new DCaiBean(hpBean));
				}
				Canyin_Shop_Diningtable table = new Canyin_Shop_Diningtable();
				table.setFloorcode(mOpCurMsg.getTingBH());
				table.setCode(mOpCurMsg.getTaiBH());
				orderWMDish(table,mOpCurMsg.getLslsh(), mOpCurMsg.getTasteRemark(), jsonArray.toJSONString());
				doFetchLsProductDel(mOpCurMsg.getLslsh());
				MsgTakeOrderFragment.this.close();
//				orderDish(mOpCurMsg.getTingBH(), mOpCurMsg.getTaiBH(), mOpCurMsg.getLslsh(), mOpCurMsg.getTasteRemark(), jsonArray.toJSONString());
			}else {
				if (productList.isEmpty()) {
					SysWorkTools.showToast(getActivity(), "请选择菜品");
					return;
				}
				Bundle bundle = new Bundle();
				bundle.putString(Constans.KEY_LSLSH, mOpCurMsg.getLslsh());
				bundle.putSerializable(Constans.KEY_ORDER_LIST, productList);
				bundle.putString(Constans.KEY_TASTE, tasteStr);
				ChooseTableDialogFragment dialog = new ChooseTableDialogFragment();
				dialog.setArguments(bundle);
				dialog.show(((MainActivity) getActivity()).getSupportFragmentManager(),"DishOperateDialogFrament");// 启动Fragment
			}
//			
//			Bundle bundle = new Bundle();
//			bundle.putString(Constans.KEY_LSLSH, mOpCurMsg.getLslsh());
//			bundle.putSerializable(Constans.KEY_ORDER_LIST, productList);
//			bundle.putString(Constans.KEY_TASTE, tasteStr);
//			ChooseTableDialogFragment dialog = new ChooseTableDialogFragment();
//			dialog.setArguments(bundle);
//			dialog.show(((MainActivity) getActivity()).getSupportFragmentManager(),"DishOperateDialogFrament");// 启动Fragment
			
		}
	};

	/**
	 * 搜索功能监听
	 */
	TextWatcher watcher = new TextWatcher() {

		@Override
		public void onTextChanged(CharSequence s, int arg1, int arg2, int arg3) {
		}

		@Override
		public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
				int arg3) {
		}

		@Override
		public void afterTextChanged(Editable s) {
			if (!TextUtils.isEmpty(s.toString())) {
				mTongjiLinlout.setVisibility(View.GONE);
				mSearchIv.setVisibility(View.VISIBLE);
				mSearchRl.setVisibility(View.VISIBLE);
				mCancelSearchTv.setVisibility(View.VISIBLE);
				String searchText = s.toString();
				if (!TextUtils.isEmpty(searchText)) {
					String columnName = "status";
					try {
						pinyinList = dbManager
								.selector(Canyin_Shop_Product.class)
								.where(WhereBuilder.b("mcode", "LIKE",
										"%" + searchText + "%").and(
										WhereBuilder.b(columnName, "=", 0))).findAll();
						//.or(columnName, "=", 1)
					} catch (DbException e) {
						e.printStackTrace();
					}
				}
				pinyinAdapter.setItems(pinyinList);
				pinyinAdapter.notifyDataSetChanged();

			} else {
				pinyinList.clear();
				mSearchIv.setVisibility(View.GONE);
				mSearchRl.setVisibility(View.GONE);

			}

		}

	};

	@Override
	public void onItemSelected(AdapterView<?> arg0, View arg1, int arg2,
			long arg3) {
	}

	@Override
	public void onNothingSelected(AdapterView<?> arg0) {
	}

	OnItemClickListener pinyinItemClickListener = new OnItemClickListener() {

		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position,
				long id) {
			selectProduct = (Canyin_Shop_Product) parent
					.getItemAtPosition(position);
			MsgProBean bean = new MsgProBean(selectProduct, null);
			productList.add(bean, 1);
			productAdapter.setItems(productList);
			productAdapter.notifyDataSetChanged();
			pinyinList.clear();
			mSearchEt.setText("");
			statisticsDishNum();
			doNoPayTotal();// 价格合计
			mSearchRl.setVisibility(View.GONE);
			mSearchIv.setVisibility(View.GONE);
			mCancelSearchTv.setVisibility(View.GONE);
			SysWorkTools.closeKeyboard(mSearchEt);
		}
	};

	/**
	 * 取消按钮事件
	 */
	OnClickListener cancelSearchListener = new OnClickListener() {

		@Override
		public void onClick(View arg0) {
			mCancelSearchTv.setVisibility(View.GONE);
			mSearchIv.setVisibility(View.GONE);
			mSearchRl.setVisibility(View.GONE);
			mSearchEt.setText("");
			SysWorkTools.closeKeyboard(mSearchEt);
		}
	};

	private SwipeMenuCreator creator = new SwipeMenuCreator() {

		@Override
		public void create(SwipeMenu menu) {
			SwipeMenuItem menuItem;
			menuItem = new SwipeMenuItem(getActivity());
			menuItem.setBackground(new ColorDrawable(Color
					.rgb(0xFE, 0x1A, 0x1A)));
			menuItem.setWidth(SysWorkTools.dp2px(getActivity(), 90));
			menuItem.setIcon(R.drawable.iv_swipe_list_delete);
			menu.addMenuItem(menuItem);

		}
	};

	private OnMenuItemClickListener mOnMenuItemClickListener = new OnMenuItemClickListener() {

		@Override
		public boolean onMenuItemClick(int position, SwipeMenu menu, int index) {
			Fragment f;
			switch (index) {
			case 0:
				delDish(position);
				break;
			}
			return false;
		}
	};

	/**
	 * 未下单合计
	 */
	private void doNoPayTotal() {

		double t = 0.0;
		for (int i = 0; i < productList.size(); i++) {
			noPayPrice = productList.get(i).getPrice()
					* productList.get(i).getCnt();
			t = t + noPayPrice;
		}

		DecimalFormat decimalFormat = new DecimalFormat("0.00");// 构造方法的字符格式这里如果小数不足2位,会以0补足.
		String distanceString = decimalFormat.format(t);
		mPriceTotalTv.setText("￥" + distanceString + "");
		noPayPrice = 0.0d;
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		HomeBroadcastReceiver.unregisterIDataTransfer(this);
		tasteStr = "";
		PrefsConfig.saveRemarks(mOpCurMsg.getLslsh(), tasteStr);
		SysWorkTools.closeKeyboard(mSearchEt);
	}

	@SuppressWarnings("unchecked")
	@Override
	public void onDataTransfer(int type, Object... data) {

		if (type == Constans.TYPE_WHOLE_TASTE) {
			tasteStr = (String) data[0];
			if (!TextUtils.isEmpty(tasteStr)) { // 有整单备注数据
				mMiddleRl.setVisibility(View.VISIBLE);
				mRemarkRelalout.setVisibility(View.VISIBLE);
				mMarksTv.setText(tasteStr);
			} else {
				mMiddleRl.setVisibility(View.GONE);
				mRemarkRelalout.setVisibility(View.GONE);
				mMarksTv.setText("");
			}
		} else if (type == Constans.TYPE_SINGLE_TASTE) {
			int position = (Integer) data[0];
			String taste = (String) data[1];
			String wStatus = (String) data[2];
			if (!TextUtils.isEmpty(taste)) {
				productList.get(position).setMarkTaste(taste);
			}
			productList.get(position).setWaitStatus(wStatus);
			productAdapter.setItems(productList);
			productAdapter.notifyDataSetChanged();
		} else if (type == Constans.TYPE_ORDER_PRO_ADD_SUB) {
			productAdapter.notifyDataSetChanged();
			statisticsDishNum();
			doNoPayTotal();
		} else if (type == Constans.TYPE_ADD_PRO_LIST) {
			MsgProductList<MsgProBean> addList = (MsgProductList<MsgProBean>) data[0];
			for (MsgProBean item : addList) {
				productList.add(item, 1);
			}
			productAdapter.setItems(productList);
			productAdapter.notifyDataSetChanged();
			statisticsDishNum();
			doNoPayTotal();
		} else if (type == Constans.TYPE_INPUT_PRO_CNT) {
			float fCnt = (Float) data[0];
			int positon = (Integer) data[1];
			productList.get(positon).setCnt(fCnt);
			productAdapter.notifyDataSetChanged();
			statisticsDishNum();
			doNoPayTotal();
		} else if (type == Constans.TYPE_MSG_TAKE_ORDER_SUCC) {
			String lsh = (String) data[0];
			doFetchLsProductDel(lsh);
		}

	}

	private void delDish(int position) {
		productList.remove(position);// 删除当前位置数据
		productAdapter.notifyDataSetChanged();
		statisticsDishNum();
		doNoPayTotal();// 调用未下单合计
	}

	private void statisticsDishNum() {
		if (productList.size() > 0) { // 品项目合计
			mTongjiLinlout.setVisibility(View.VISIBLE);
			mProductPhaseTotalTv.setText(productList.size() + "项");
			float count = 0.0f;
			for (MsgProBean item : productList) {
				count += item.getCnt();
			}
			try {
				mNumTotalTv.setText(String.valueOf(count));
			} catch (Exception e) {
				FrameLog.e(TAG, e);
			}
		} else {

			mTongjiLinlout.setVisibility(View.GONE);
			mProductPhaseTotalTv.setText("0项");
			mNumTotalTv.setText("0");
		}
	}

	public void entrySingleDishRemark(int position, HaveProductBean product) {
		SingleDishRemarkFragment fragment = new SingleDishRemarkFragment();
		Bundle bundle = new Bundle();
		bundle.putInt(Constans.TAKE_ORDER_POSITION, position);
		bundle.putString(Constans.WAIT_STATUS_TASTE, product.getWaitStatus());
		fragment.setArguments(bundle);
		((MainActivity) getActivity()).entrySubFragment(fragment);
	}
	
	
	private void doFetchLsProductDel(final String lsh) {
		if (SysWorkTools.isNetAvailable()) {
			DataFetchManager.getInstance().fetchLsProductDel(lsh, new FetchListener() {
				
				@Override
				public void onPreFetch() {
					bIsLoading = true;
					showLoading(true);
				}
				
				@Override
				public void onPostFetch(int status, Object... result) {
					if (status == FetchListener.STATUS_OK) {
						HomeBroadcastReceiver.onDataTransfer(Constans.TYPE_MSG_DELETE, lsh);
					}else {
					}
					showLoading(false);
					close();
					bIsLoading = false;
				}
			});
		}else {
			SysWorkTools.showToast(getActivity(), "请检查网络");
		}
		
	}
	
	private void showLoading(boolean bShow) {
		try {
			((MainActivity) getActivity()).showLoading(bShow);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 单桌点菜
	 * 
	 * @param tingbh
	 * @param taibh
	 * @param ktlsh
	 * @param data
	 */
	private void orderDish(String tingbh, String taibh, final String ktlsh,String taste, String data) {
		if (SysWorkTools.isNetAvailable()) {
			DataFetchManager.getInstance().fetchOrderDishes(tingbh, taibh, ktlsh, taste, data, new FetchListener() {

				@Override
				public void onPreFetch() {
					ProgressView.getInstance(getActivity()).showProgress(mRootView);
				}

				@SuppressWarnings("unchecked")
				@Override
				public void onPostFetch(int status, Object... result) {
					ProgressView.getInstance(getActivity()).hideProgress(mRootView);
					if (status == FetchListener.STATUS_OK) {
						SysWorkTools.showToast(getActivity(), "下单成功");
						HomeBroadcastReceiver.onDataTransfer(Constans.TYPE_MSG_TAKE_ORDER_SUCC, mOpCurMsg.getLslsh());
						
//						List<FenChuPrinter> tList = (List<FenChuPrinter>) result[0];
//						if (tList != null && tList.size() > 0) {
//							//TODO 打印下单
//							}

					} else {
						SysWorkTools.showToast(getActivity(), "下单失败");
					}
				}
			});
		}else {
			SysWorkTools.showToast(getActivity(), "请检查网络");
		}
		
	}

	
	private void orderWMDish(Canyin_Shop_Diningtable table, String ktlsh, String taste, String data) {
		if (SysWorkTools.isNetAvailable()) {
			DataFetchManager.getInstance().fetchOrderWMDish(table.getFloorcode(),
					table.getCode(), ktlsh, taste, data, new FetchListener() {

						@Override
						public void onPreFetch() {
							ProgressView.getInstance(getActivity()).showProgress(mRootView);
						}

						@SuppressWarnings("unchecked")
						@Override
						public void onPostFetch(int status, Object... result) {
							ProgressView.getInstance(getActivity()).hideProgress(mRootView);
							if (status == FetchListener.STATUS_OK) {
								SysWorkTools.showToast(getActivity(), "下单成功");
//								HomeBroadcastReceiver.onDataTransfer(Constans.TYPE_MSG_TAKE_ORDER_SUCC, mLslsh);
//								dismiss();
//								List<FenChuPrinter> tList = (List<FenChuPrinter>) result[0];
	//
//								if (tList != null && tList.size() > 0) {
//								}
							}else if (status == FetchListener.StATUS_OFFLINE) {
								FrameLog.d(TAG, "status------" + status);
							}else {
								SysWorkTools.showToast(getActivity(), "下单失败");
							}
						}
					});
		}else {
			SysWorkTools.showToast(getActivity(), "请检查网络");
		}
		
	}
	
}
